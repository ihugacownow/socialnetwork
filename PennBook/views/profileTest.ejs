<!DOCTYPE html>
<html lang="en">

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Profile Page</title>

    <!-- Bootstrap Core CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom CSS -->
    <link href="css/1-col-portfolio.css" rel="stylesheet">

    <link rel="stylesheet" href="http://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
  <script src="http://code.jquery.com/jquery-1.10.2.js"></script>
  <script src="http://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>

    <script>

     // initialize variables so that they can be passed to backend during the rendering 
    var postTable; 
    var firstname;
    var lastname; 
    var email; 
    var userID; 

  // Other Variables for functionality 
    var tagButton; 
    var namesearch; 
    var allUsers;
    var posteeID;
    var posterID;

  console.log("session is: asdfdsfsdafdsfsafdfadsfdsfsafsfs");
  var c = '<%- JSON.stringify(session) %>';
  console.log("session id is, ", JSON.parse(c));
  var cc = JSON.parse(c);
  firstname = cc.firstname;
  lastname = cc.lastname;
  email = cc.email;
  userID = cc.ID;
  allUsers = cc.users; 
  console.log("ALL USERS ARE: ", allUsers);


  // Additional section for user profile passed in 

    var userRaw = '<%- JSON.stringify(user) %>';
        console.log("UNparsed user is, ",c);

    console.log("parsed user is, ", JSON.parse(userRaw));
    var parsedUser = JSON.parse(userRaw);
   



    $(function(){
      // Additional for add posts later 
      posteeID = parsedUser['inx'];
      posterID = userID;


      var availableTags = [];
      for (var k = 0; k < allUsers.length; k++) {
        availableTags.push(allUsers[k]['key']);
      }

    $( "#tags" ).autocomplete({
      source: availableTags
    });

    postTable = $('#post-table');
    tagButton = $('#tags');
    namesearch = $('#namesearch');

    setUpSearchBar(namesearch); 
    refreshPage(parsedUser); 



    });

// -------------------

var setUpSearchBar = function(elem) {
    console.log("Seting up search bar");

  elem
    // button
    .append($('<input/>', {
      value: "Search",
      type: "button",
      class: 'btn btn-primary',
      // Sends a post first 
      click: function() {     
            // Format json object   
            // var postingData = JSON.stringify(formData);  
            var formData = $('#tags').val(); 
            var lookupUser; 
            for (var l = 0; l < allUsers.length; l++) {
              console.log("llooping through all users: ", allUsers[l]['key']);
              if (allUsers[l]['key'] == formData) {
                lookupUser = allUsers[l];
              }
            }
            // var lookupUser = allUsers[formData];    
            console.log("lookupUser is: ", lookupUser);
            // rsponse would have been a user id
            window.location = '/profile?userObject=' + JSON.stringify(lookupUser);
                
        }   
        /*var newComment = $('<div style="border: 1px solid black;" />').text(
            
        )*/
        
     }));   
}

// Refresh page 
var refreshPage = function(parsedUser) {   
  console.log("Refreshing tehe page");
  $.get('/getPostsAjax', function(res) {
    // Reset the table first 
    console.log("FRONTEND: Response from server: ", res);
    postTable.html(''); // search specifics later 
    var responseJSON = JSON.parse(res); 
    var response = responseJSON.posts; 
        console.log("FRONTEND: parsed response to send to loadposts is: ", response);

    console.log("Prased response is: ", response);
    loadPosts(response); 

  });
      loadProfile(parsedUser);
          loadAddPost();
  console.log("post table is: ", postTable);
}


// Creating the add posts part 
// Load Profile happens here 
function loadAddPost() {
 
 // TODO: 
  $('#addPost-table').append( $('<div/>', {style: 'width: 50%; text-align: center; display: inline-box; font-size: 30px;'}).text("Add Posts")
    );

   $('#addPost-table').append(createAddButton(posterID, posteeID));

}

function createAddButton(posterID, posteeID) {
  // Assign post id as id of the comment box 
  var elem = $('<div/>', {
        id: "createAddButton", 
  });

  elem
    // label
    .append($('<label/>').text("Add new post:"))
    // text field
    .append($('<input/>', {
        type: "text",
        style: "margin: 7px",
        id: "post-add",
    }))

    // button
    .append($('<input/>', {
      value: "Post",
      type: "button",
      class: 'btn btn-primary',
      // Sends a post first 
      click: function() {     
            // Format json object  
            var newText =  $('#post-add').val();  
            var formData = {
                'text'  : $('#post-add').val(), 
                'owner2' : posteeID, 
                'owner1' : posterID,  // TODO: check who is who 
                // note no comment id here, it is generated backend 
            };

            console.log("sending add post data to backend: ", formData);
            // var postingData = JSON.stringify(formData);  

              $.post('/addpost', formData, function(response) {
                    // TODO: check comment json passed back  (values: postID, (key) ID, text, owner)

                    // Hard code TODO
                    var newKey = (JSON.parse(response))['postID'];
                                        console.log("Done with posting, and postID: ", newKey);

                    var newPost = {'key' : newKey, 
                                  'inx' : newKey,
                                  'value' : {"owner1"  : posteeID, 
                                             'owner2'   : posterID, 
                                             'text'     : newText, 
                                             'commentTexts' : [],                         
                                             'commentOwners' : [],
                                             'commentIDs'    : []
                                              }                       
                 
                    };
                    
                    var postToAdd = createPostElement(newPost);
                    postTable.append(postToAdd);
                } 
            );
        }       
        /*var newComment = $('<div style="border: 1px solid black;" />').text(
            
        )*/
        
     }))
     console.log("returning comment elements");


  return elem;
}



// Load Profile happens here 
function loadProfile(jsonResponse) {
  // TODO where is this key from??? 
  var key = jsonResponse['key'];
  var values = jsonResponse['value']; 
 
 // TODO: 
  $('#profile-table').append( $('<div/>', {style: 'width: 50%; text-align: center; display: inline-box; font-size: 30px;'}).text("Profile Information")
    );

  $('#profile-table').append(createFriendButton(key, 0));

  console.log("values of user object is ", values );
  $('#profile-table').append(createProfileElementSingle(values['firstname'], "firstname"));
  $('#profile-table').append(createProfileElementSingle(values['lastname'], "lastname"));
  $('#profile-table').append(createProfileElementSingle(values['status'], "status"));
 $('#profile-table').append(createProfileElementSingle(values['affiliation'], "affiliation"));
   $('#profile-table').append(createProfileElementSingle(values['birthday'], "birthday"));


  $('#profile-table').append(createProfileElementMany(values['interests'], "interests"));
}



function createProfileElementSingle(value, divID) {
   var elem = $('<div/>');

  elem.append(
      $('<div/>', {style: 'width: 50%; display: inline-box; font-size: 20px;'}).text(divID + ' : ' + value)
    ); 
  elem.append(
      '<hr/>'
    ); 
   // elem.append(
   //    $('<div/>', {style: 'width: 50%; display: inline-box; text-align: center; font-size: 20px;'}).text(value)
   //  ); 

    // style: "text-align: center; font-size: 20px;"
   
  console.log("returning profile element: ", divID);

  return elem;
}

function createProfileElementMany(values, divID) {
   var elem = $('<div/>');


  elem.append(
       $('<div/>', {style: 'width: 50%; display: inline-box; font-size: 20px;'}).text(divID + ':')
    ); 

  console.log("values are: " + values);
  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    var count = i + 1;
    var countSt = count + ') ';
    elem.append(
    $('<div/>', {style: 'width: 50%; display: inline-box'}).text(countSt + value)
    ); 
  }   
   
  console.log("returning profile element: ", divID);

  return elem;
}




function createFriendButton(divID, friendInt) {

  // Assign post id as id of the comment box 
  var elem = $('<div/>', {
    id: divID, 
  });

  var addFriend; 
  if (friendInt == "0") { 
                   addFriend = "Add Friend";
     } else if (friendInt == "1") {
                   addFriend = "Request Sent";
     } else if (friendInt == "2") { 
                   addFriend = "Already Added";
     } else {   
                   addFriend = "Already Friends";
    }    

  elem
    // label
    .append($('<label/>').text(addFriend))
    // button
    .append($('<input/>', {
      value: "Post",
      type: "button",
      class: 'btn btn-primary',
      // Sends a post first 
      click: function() {     
          // Format json object   
          var formData = {
              'user2'  : posteeID,
              'user1'  : posterID
        // note no comment id here, it is generated backend 
           };

           console.log("add friend formdata: ", formData);

          $.post('/addfriend', formData, function(response) {
                console.log("sent friend request"); 
            });       
        
      }
    }))
    .append('<hr/>')

  console.log("returning comment elements");
  return elem;
}



// LOAD POSTS SECTION ------------------------
function loadPosts(jsonResponse) {
    var posts = jsonResponse;
    for (var i = 0; i < posts.length; i++) {
        $('#post-table').append(createPostElement(posts[i]))
            .append($("<hr/>"));
    }
}


function createPostElement(post) {
    var elem = $('<div/>', {
        id: "post-" + post.key,
        class: 'row'
    });

    elem
        .append(createPostContent(post))
        .append(createCommentSection(post));
  console.log("returning post element: ", elem);

  return elem;
}

// // Debug 
//      console.log("A",    post['key']);
//      console.log("comment ID ",  post['value']['commentIDs'][i]);
//     console.log("comment Texts ",post['value']['commentTexts'][i]);
//      console.log("comment Owners ",post['value']['commentOwners'][i]);

function createCommentSection(post) {
  console.log("Create comment section called");
  console.log("Post is ", post);
    var elem = $('<div/>', {
        class: 'col-md-5'
    });
    for (var i = 0; i < post['value']['commentTexts'].length; i++) {    
        elem.append(createCommentElement
            (post['key'], post['inx'],
            post['value']['commentIDs'][i], 
            post['value']['commentTexts'][i],
            post['value']['commentOwners'][i]));
    }
    elem.append(createCommentButton(post.key, post.inx));
    return elem;
}


function createPostContent(post) {
    var elem = $('<div/>');
  
  // Appending Text of posts 
    elem.append(
        $('<div/>', {
            class: 'col-md-7',
            style: "text-align: center; font-size: 20px;",
        }).text(post.value.text)
    ); 
  
  console.log("post is: ", post.value);

  return elem;
}


function createCommentButton(id, postInx) {
  // Assign post id as id of the comment box 
  var commentText = $('#comment-box-' + id).val(); 
  var elem = $('<div/>', {
        id: id, 
  });

  elem
    // label
    .append($('<label/>').text("Add new comment:"))
    // text field
    .append($('<input/>', {
        type: "text",
        style: "margin: 7px",
        id: "comment-box-" + id,
    }))
    // button
    .append($('<input/>', {
      value: "Post",
      type: "button",
      class: 'btn btn-primary',
      // Sends a post first 
      click: function() {     
          // Format json object   
          console.log("first name here is: ," , firstname);
          var formData = {
            
        'text'  : $('#comment-box-' + id).val(), 
        'postID'  : id,
        'firstname' : firstname, 
        'lastname' : lastname,  
            'userID'  : userID,
            'postInx' : postInx

        // note no comment id here, it is generated backend 
      };
      // var postingData = JSON.stringify(formData);  

      $.post('/addcomment', formData, function(response) {
          // TODO: check comment json passed back  (values: postID, (key) ID, text, owner)
          var jsonRes = JSON.parse(response);
          console.log("Json response is: ", jsonRes);          

               var commentToAdd = createCommentElement(id, postInx, (JSON.parse(response)).inx, commentText, firstname + lastname);
          commentToAdd.insertBefore('#' + id);
                refreshPage(parsedUser); 
                console.log("Done refreshing after comment added");
        } 
      );
    }       
          

        
    }))
     console.log("returning comment elements");
  return elem;
}

function createCommentElement(postKey, postInx, commentID, commentText, commentOwner) {
  console.log("commentText is ;:: ", commentText);
  var commentDiv = $('<div/>', {
    id: "" + postKey + "*" + commentID,
    text: commentOwner + " says " + commentText
  });
    return commentDiv;
}



// Load Posts all happen after here 
/*
function loadPosts(jsonResponse) {
    var posts = jsonResponse;
    $('#post-table').append( $('<div/>', {style: 'width: 50%; text-align: center; display: inline-box; font-size: 30px;'}).text("List of Posts")
    );
    for (var i = 0; i < posts.length; i++) {
        $('#post-table').append(createPostElement(posts[i]))
            .append($("<hr/>"));
    }
}


function createPostElement(post) {
    var elem = $('<div/>', {
        id: "post-" + post.key,
        class: 'row',
        style: "border: 1px solid #d0d0d0; padding: 10px;"
    });

    elem
        .append(createPostContent(post))
        .append(createCommentSection(post));
  console.log("returning post element: ", elem);

  return elem;
}

// // Debug 
//      console.log("A",    post['key']);
//      console.log("comment ID ",  post['value']['commentIDs'][i]);
//     console.log("comment Texts ",post['value']['commentTexts'][i]);
//      console.log("comment Owners ",post['value']['commentOwners'][i]);

function createCommentSection(post) {
    var elem = $('<div/>', {
        class: 'col-md-5'
    });
    for (var i = 0; i < post['value']['commentTexts'].length; i++) {    
        elem.append(createCommentElement
            (post['key'],
            post['value']['commentIDs'][i], 
            post['value']['commentTexts'][i],
            post['value']['commentOwners'][i]));
    }
    elem.append(createCommentButton(post.key));
    return elem;
}

function createPostContent(post) {
    var elem = $('<div/>');
  
  // Appending Text of posts 
    elem.append(
        $('<div/>', {
            class: 'col-md-7',
            style: "text-align: center; font-size: 20px;",
        }).text(post.value.text)
    ); 
  
  console.log("post is: ", post.value);
  
  // Appending comments 
  /*  for (var i = 0; i < post['value']['commentTexts'].length; i++) {    
        elem.append(createCommentElement
            (post['key'],
            post['value']['commentIDs'][i], 
            post['value']['commentTexts'][i],
            post['value']['commentOwners'][i]));
    } 
  
    console.log("returning post content with comments");

  return elem;
}


function createCommentButton(id) {
  // Assign post id as id of the comment box 
  var elem = $('<div/>', {
        id: id, 
  });

  elem
    // label
    .append($('<label/>').text("Add new comment:"))
    // text field
    .append($('<input/>', {
        type: "text",
        style: "margin: 7px",
        id: "comment-box-" + id,
    }))
    // button
    .append($('<input/>', {
      value: "Post",
      type: "button",
      class: 'btn btn-primary',
      // Sends a post first 
      click: function() {     
            // Format json object   
            var formData = {
                'text'  : $('#comment-box-' + id).val(), 
                'postID'    : id,
                'firstname' : firstname, 
                'lastname' : lastname,  
                // note no comment id here, it is generated backend 
            };
            // var postingData = JSON.stringify(formData);  

            $.post('/addcomment', formData, function(response) {
                    // TODO: check comment json passed back  (values: postID, (key) ID, text, owner)
                    var jsonRes = JSON.parse(response);
                    console.log("Json response is: ", jsonRes);
                    var commentToAdd = createCommentElement(jsonRes.values.postID, jsonRes.key,jsonRes.values.text, jsonRes.values.owner);
                    commentToAdd.insertBefore('#' + id);
                } 
            );
        }       
        /*var newComment = $('<div style="border: 1px solid black;" />').text(
            
        )
        
     }))
     console.log("returning comment elements");


  return elem;
}


function createCommentElement(postKey, commentID, commentText, commentOwner) {

    var commentDiv = $('<div/>', {
        id: "" + postKey + "*" + commentID,
        text: commentOwner + " says " + commentText
    });

    return commentDiv;
}*/




    </script>

</head>

<body>

    <!-- Navigation -->
    <nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
        <div class="container">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                 <a class="navbar-brand" href="/">PennBook</a>
                   <ul class="nav navbar-nav">
                      <li>
                          <a href="/logout">Logout</a>
                      </li>
                   
                  </ul>
            </div>
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav">
                </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container -->
    </nav>

    <!-- Page Content -->
    <div class="container">

        <!-- Page Heading -->
        <div class="row">
            <div class="col-lg-12">
               <div class="ui-widget">
                  <label for="tags">Tags: </label>
                  <input id="tags" style="width:50%;">
                  <div id="namesearch" style="width: 40" /> 
               </div> 
            </div>
        </div>
        <hr/>

         <!-- Profile Tables -->
         <div class="row">

        <div id="profile-table" class="row col-lg-3" style="background-color: #d0d0d0; ">
        </div>


        <!-- Post Tables -->

        <div id="post-table" class="row col-lg-9">
          <h1> List of Posts <h1>
        </div>
      </div>

        <!-- /.row -->

        <hr>


        <!-- Add Post Part  -->

         <div id="addPost-table" class="row">
          <h1> Add a new post <h1>
         </div>     

        <hr>



    

        <!-- Footer -->
        <footer>
            <div class="row">
                <div class="col-lg-12">
                    <p>Copyright &copy; Wai and Brian 2015</p>
                </div>
            </div>
            <!-- /.row -->
        </footer>

    </div>
    <!-- /.container -->

    

</body>

</html>
